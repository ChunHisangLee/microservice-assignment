openapi:
  title: "Transaction Service API"
  version: "v1"

spring:
  rabbitmq:
    host: localhost  # RabbitMQ host in Local environment
    port: 5672
    username: guest
    password: guest

  datasource:
    url: jdbc:postgresql://localhost:5432/transactiondb  # Local database connection
    username: postgres
    password: Ab123456
    driver-class-name: org.postgresql.Driver
    hikari:
      auto-commit: true

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    open-in-view: false  # Disable open-in-view for better performance

  data:
    redis:
      host: localhost
      port: 6379
      password: Ab123456
      timeout: 60000ms  # 60 seconds, specified in milliseconds

# Custom application-specific settings
app:
  transaction:
    cache-prefix: "transactionCache:"  # Redis key prefix for transaction data
    queue:
      create: transaction.create.queue   # Queue for transaction creation messages
      update: transaction.update.queue   # Queue for transaction update messages
      balance: transaction.balance.queue # Queue for transaction balance updates
    exchange: transaction-exchange       # Exchange for transaction messages
    routing-key:
      create: transaction.creation       # Routing key for transaction creation
      update: transaction.update         # Routing key for transaction updates
      balance: transaction.balance       # Routing key for transaction balance updates

  redis:
    btc-price-key: "BTC_CURRENT_PRICE"  # Redis key for storing BTC price

# SpringDoc settings for API documentation
springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html

# Logging pattern
logging:
  level:
    com.jack.transactionservice: INFO

  pattern:
    console: "${LOGPATTERN_CONSOLE:%green(%d{HH:mm:ss.SSS}) %blue(%-5level) %red([%thread]) %yellow(%logger{15}) - %msg%n}"
